spring事物传播属性
REQUIRED(0), 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
SUPPORTS(1), 支持当前事务，如果当前没有事务，就以非事务方式执行。
MANDATORY(2), 支持当前事务，如果当前没有事务，就抛出异常。
REQUIRES_NEW(3),  新建事务，如果当前存在事务，把当前事务挂起。
NOT_SUPPORTED(4), 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
NEVER(5), 以非事务方式执行，如果当前存在事务，则抛出异常。
NESTED(6); 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，

spring事物隔离级别
DEFAULT(-1), 默认的隔离级别，使用数据库默认的事务隔离级别.
READ_UNCOMMITTED(1), 这是事务最低的隔离级别，它允许其他一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻读。
READ_COMMITTED(2), 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。
REPEATABLE_READ(4), 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。
SERIALIZABLE(8); 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读。

幻读：事务1读取记录时事务2增加了记录并提交，事务1再次读取时可以看到事务2新增的记录；
不可重复读取：事务1读取记录时，事务2更新了记录并提交，事务1再次读取时可以看到事务2修改后的记录；
脏读：事务1更新了记录，但没有提交，事务2读取了更新后的行，然后事务T1回滚，现在T2读取无效。

