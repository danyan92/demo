RDB方式：
RDB方式是将内存中的数据的快照以二进制的方式写入名字为 dump.rdb的文件中。

#900秒内如果有超过1个key被修改则发起保存快照
save 900 1
#300秒内如果有超过10个key被修改则发起保存快照
save 300 10
#60秒内如果有超过1000个key被修改则发起保存快照
save 60 10000
save 命令会造成阻塞，线上使用bgsave 命令
bgsave fork子程序进保存的操作
lastsave 查看上次保存是否完成

redis 重启时会根据保存的.rdb文件进行数据的恢复

关闭rbd
config set save ""

AOF方式：
RDB方式是周期性的持久化数据， 如果未到持久化时间点，
Redis会因为某些原因而造成故障停机，那么服务器将丢失最近写入、且仍未保存到快照中的那些数据。
所以从redis 1.1开始引入了AOF方式，AOF持久化记录服务器执行的所有写操作命令，并在服务器启动时，
通过重新执行这些命令来还原数据集。AOF文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。

#每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全
appendfsync always
#每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据
appendfsync everysec
#从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择
appendfsync no

启用aof
修改redis.conf
appendonly yes

重启redis
redis-cli config set  appendonly yes

1.Redis 恢复的机制
如果只配置 AOF ，重启时加载 AOF 文件恢复数据；
如果同时配置了 RDB 和 AOF ，启动是只加载 AOF 文件恢复数据；
如果只配置 RDB，启动是将加载 dump 文件恢复数据。

2. 从 aof 中恢复数据
1 注意以下配置
appendonly yes
dir /home/redis/data_6379/
2 拷贝 AOF 文件到 Redis 的数据目录
cp appendonly.aof /home/redis/data_6379/
3 启动 redis-server
redis-server redis_6379.conf

3. 从 RDB 文件恢复数据
1 注意以下配置
appendonly no
dir /home/redis/data_6379/
2 拷贝 RDB 文件到 Redis 的数据目录
cp dump.db /home/redis/data_6379/
3 启动 redis-server
redis-server redis_6379.conf